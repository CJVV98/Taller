/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tallerfecha1;

import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.management.Query.gt;
import static javax.management.Query.lt;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author johan
 */
public class Panel2 extends javax.swing.JPanel {
    private  Actividad act; 
    private  LocalDate fechan;
    private  String tuser,trecreador;
    private  Timestamp ahora12;
    private  Date fecha1;
    private  Time horainicial,horafinal;
    private LocalTime hora1,hora2;
    private int limite  = 4;
    private DefaultTableModel table_model_eventos;
    /**
     * Creates new form Panel2
     */
    public Panel2() {
        initComponents();
        recreadoresl.removeAllItems();
        ArrayList<String> lista=new  ArrayList<String>();
        lista=Repositorio.llenar_combo(); 
        for(int i=0;i<lista.size();i++){
        recreadoresl.addItem(lista.get(i));
        eliminar.setVisible(false);
        editar.setVisible(false);
    }}
 public void setTableModel(DefaultTableModel table_model_eventos){
        this. table_model_eventos =  table_model_eventos;
    }
    
    public void refreshTableModel()
    {
       ArrayList<Actividad> lista_eventos=Repositorioact.obtenerTodos();
       while(table_model_eventos.getRowCount()>0){
            table_model_eventos.removeRow(0);
       }
       
       for(Actividad p: lista_eventos){         
           SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
           SimpleDateFormat sdh = new SimpleDateFormat("hh:mm:ss");
           String fecha1=sdf.format(p.getFechai());
          
           String hora1=sdh.format(p.getHorainicio());
           String hora2=sdh.format(p.getHorafin());
           String[] data={p.getNombre(),fecha1,hora1,hora2,p.getDescripcion(),p.getRecreador()};
           table_model_eventos.addRow(data);
       }
    }
     
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_ano = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_horai = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txt_horaf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_descripcion = new javax.swing.JTextArea();
        recreadoresl = new javax.swing.JComboBox<>();
        agregar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        editar = new javax.swing.JButton();
        txt_mes = new javax.swing.JTextField();
        txt_dia = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        buscarevento = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 153));

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setText("REGISTRO DE EVENTOS");

        jLabel2.setText("Nombre del Evento");

        txt_nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_nombreKeyTyped(evt);
            }
        });

        jLabel3.setText("Fecha");

        txt_ano.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_anoKeyTyped(evt);
            }
        });

        jLabel4.setText("Hora de Inicio");

        txt_horai.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_horaiKeyTyped(evt);
            }
        });

        jLabel5.setText("Hora Final");

        txt_horaf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_horafKeyTyped(evt);
            }
        });

        jLabel6.setText("Recreador");

        jLabel7.setText("Descripcion");

        txt_descripcion.setColumns(20);
        txt_descripcion.setRows(5);
        jScrollPane1.setViewportView(txt_descripcion);

        recreadoresl.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        agregar.setBackground(new java.awt.Color(0, 102, 102));
        agregar.setForeground(new java.awt.Color(255, 255, 255));
        agregar.setText("AGREGAR");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        eliminar.setBackground(new java.awt.Color(153, 0, 0));
        eliminar.setForeground(new java.awt.Color(255, 255, 255));
        eliminar.setText("ELIMINAR");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        editar.setBackground(new java.awt.Color(0, 0, 102));
        editar.setForeground(new java.awt.Color(255, 255, 255));
        editar.setText("EDITAR");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        txt_mes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_mesKeyTyped(evt);
            }
        });

        txt_dia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_diaKeyTyped(evt);
            }
        });

        jLabel8.setText("(a√±o)");

        jLabel9.setText("(mes)");

        jLabel10.setText("(dia)");

        buscarevento.setBackground(new java.awt.Color(102, 0, 102));
        buscarevento.setForeground(new java.awt.Color(255, 255, 255));
        buscarevento.setText("BUSCAR");
        buscarevento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscareventoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(recreadoresl, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_horai, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(txt_horaf, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(agregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(eliminar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buscarevento))
                            .addComponent(jLabel7)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(13, 13, 13)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_ano, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_mes, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_dia, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 96, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_ano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_mes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_dia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txt_horai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txt_horaf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(recreadoresl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregar)
                    .addComponent(eliminar)
                    .addComponent(editar)
                    .addComponent(buscarevento))
                .addContainerGap(29, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        int errores=0;
        if(txt_nombre.getText().isEmpty()||txt_mes.getText().isEmpty()||txt_dia.getText().isEmpty()||txt_ano.getText().isEmpty()||txt_horai.getText().isEmpty()|| txt_horaf.getText().isEmpty()||
            txt_descripcion.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Por favor complete todos los campos", "Error", JOptionPane.ERROR_MESSAGE);
            
                        
       }else{
           trecreador = (String) recreadoresl.getSelectedItem();//Aqui seleccionar que recreador hara la aactividad aqui hice un casteo
            LocalDateTime ahora=LocalDateTime.now();
            //Variable para revisar los 15 dias despues
            LocalDate aux=LocalDate.now();
            Date fecha2=Date.valueOf(aux.plusDays(15));
            //fecha para guardar fecha del evento
            DateFormat formatter = new SimpleDateFormat("HH:mm");
            try{
            hora1=LocalTime.parse(txt_horai.getText());
            }catch(java.time.format.DateTimeParseException sd){
                 errores++;
                 JOptionPane.showMessageDialog(this, "Por Digitar la hora en formato militar", "Error", JOptionPane.ERROR_MESSAGE);
            }
            try{
                hora2=LocalTime.parse(txt_horaf.getText());
            }catch(java.time.format.DateTimeParseException sf){
                  JOptionPane.showMessageDialog(this, "Por Digitar la hora en formato militar", "Error", JOptionPane.ERROR_MESSAGE);
            }
           if(Integer.parseInt(txt_mes.getText())<=0 || Integer.parseInt(txt_mes.getText())>=13){
                        errores++;
                        JOptionPane.showMessageDialog(this, "Este mes es incorrecto", "Error", JOptionPane.ERROR_MESSAGE);
           }
           try{
            fechan=LocalDate.of(Integer.parseInt(txt_ano.getText()), Month.of(Integer.parseInt(txt_mes.getText())), Integer.parseInt(txt_dia.getText()));
           fecha1=Date.valueOf(fechan);//Aqui hice casteo de la fecha de la actividad
            horainicial=Time.valueOf(hora1);//Aqui la de la hora inicial
            horafinal=Time.valueOf(hora2);// aqui la de la hora final
            ahora12=Timestamp.valueOf(ahora);
            System.out.println("Hora"+horainicial+" -  "+horafinal);
           }catch(java.lang.NullPointerException sr){
                errores++;
           }catch(java.time.DateTimeException df){
              errores++;
              JOptionPane.showMessageDialog(this, "Este dia es incorrecto", "Error", JOptionPane.ERROR_MESSAGE);
                    }
           if(errores==0){         
            if(fecha2.before(fecha1)){
                System.out.println("Esta despues"+fecha1+fecha2);
            }
            else{
                 errores++;
                  JOptionPane.showMessageDialog(this, "Por favor hacer la reserva con 15 dias de anterioridad", "Error", JOptionPane.ERROR_MESSAGE);
            }
            //Aqui llamo un metodo que esta en mi repositorio de actividades envio fecha horas y recreador ese metodo retorna un entero
             if(Repositorioact.comparar(fecha1,horainicial,horafinal,trecreador)==1){
                 JOptionPane.showMessageDialog(this, "Por favor revisar el horario debido a que hay un cruce de horas", "Error", JOptionPane.ERROR_MESSAGE);
                  errores++;
              }
           }
        
         if(errores==0){
            act=Actividad.crear(0,txt_nombre.getText(),txt_descripcion.getText(),trecreador,fecha1,horainicial,horafinal,ahora12);
            Repositorioact.crear(act);
           JOptionPane.showMessageDialog(this, "Actividad Registrada", "Bien", JOptionPane.INFORMATION_MESSAGE);
         }
          
       }
    }//GEN-LAST:event_agregarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        int result = JOptionPane.showConfirmDialog(this, "Realmente desea eliminar este evento", "Eliminar", JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION) {
            Repositorioact.eliminar(act);
            //this.refreshTableModel();
            this.resetActividad();
        }
    }//GEN-LAST:event_eliminarActionPerformed

     private void resetActividad() {
        act.setId(0);
        act.setNombre("");
        act.setFechai(fecha1);
        act.setHorainicio(horainicial);
        act.setHorafin(horafinal);
        act.setDescripcion("");
        act.setRecreador("");
        act.setFecharegistro1(ahora12);
        popularActividad(act);
    }
    
     private void popularActividad(Actividad act) {
        txt_nombre.setText(act.getNombre());
        txt_dia.setText(String.valueOf(act.getFechai()));
        txt_horai.setText(String.valueOf(act.getHorainicio()));
        txt_horaf.setText(String.valueOf(act.getHorafin()));
        txt_descripcion.setText(act.getDescripcion());
        recreadoresl.setSelectedItem(act.getRecreador());

        if (act.getId() != 0) {
            eliminar.setVisible(true);
            editar.setVisible(true);
        } else {
            eliminar.setVisible(false);
            editar.setVisible(true);
        }
    }
     
    private void txt_anoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_anoKeyTyped
         char c=evt.getKeyChar();
        if(Character.isDigit(c)&& (txt_ano.getText().length()<4)) {
            
       }else{
             if(txt_ano.getText().length()==4){
               JOptionPane.showMessageDialog(null,"Ya no puede exceder el maximo de digitos", "Error", JOptionPane.ERROR_MESSAGE);  
                evt.consume();
             }
            else{
            if(Character.isLetter(c) || (c>=32 && c<=47) || (c>=58 && c<=63)){
                  evt.consume();
                JOptionPane.showMessageDialog(null,"Solo se admiten numeros enteros", "Error", JOptionPane.ERROR_MESSAGE);
                 }
               
                }
        }
    }//GEN-LAST:event_txt_anoKeyTyped

    private void txt_mesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mesKeyTyped
         char c=evt.getKeyChar();
        if(Character.isDigit(c)&& (txt_mes.getText().length()<2)) {
            
       }else{
             if(txt_mes.getText().length()==2){
                  evt.consume();
               JOptionPane.showMessageDialog(null,"Ya no puede exceder el maximo de digitos", "Error", JOptionPane.ERROR_MESSAGE);  
            }
           else{
            if(Character.isLetter(c) || (c>=32 && c<=47) || (c>=58 && c<=63)){
                  evt.consume();
                JOptionPane.showMessageDialog(null,"Solo se admiten numeros enteros", "Error", JOptionPane.ERROR_MESSAGE);
                 }
               
                }
        }
    }//GEN-LAST:event_txt_mesKeyTyped

    private void txt_diaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_diaKeyTyped
        char c=evt.getKeyChar();
        if(Character.isDigit(c)&& (txt_dia.getText().length()<2)) {
            
       }else{
             if(txt_dia.getText().length()==2){
                  evt.consume();
               JOptionPane.showMessageDialog(null,"Ya no puede exceder el maximo de digitos", "Error", JOptionPane.ERROR_MESSAGE);  
            }
            else{
            if(Character.isLetter(c) || (c>=32 && c<=47) || (c>=58 && c<=63)){
                  evt.consume();
                JOptionPane.showMessageDialog(null,"Solo se admiten numeros enteros", "Error", JOptionPane.ERROR_MESSAGE);
                 }
               
                }
        }
    }//GEN-LAST:event_txt_diaKeyTyped

    private void txt_horaiKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_horaiKeyTyped
         char c=evt.getKeyChar();
        if(Character.isDigit(c) && (txt_horai.getText().length()<5)) {
            
        }else{
            if(Character.isLetter(c) || (c>=32 && c<=47) || (c>=59 && c<=63)){
                JOptionPane.showMessageDialog(null,"Solo se admiten numeros enteros y (:)", "Error", JOptionPane.ERROR_MESSAGE);
                evt.consume();
        }
            else{
               if(txt_horai.getText().length()==5){
               evt.consume();
               JOptionPane.showMessageDialog(null,"Ya no puede exceder el maximo de digitos", "Error", JOptionPane.ERROR_MESSAGE);  
            }
            }
        }
    }//GEN-LAST:event_txt_horaiKeyTyped

    private void txt_horafKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_horafKeyTyped
       char c=evt.getKeyChar();
        if(Character.isDigit(c) && (txt_horaf.getText().length()<5)) {
            
        }else{
            if(Character.isLetter(c) || (c>=32 && c<=47) || (c>=59 && c<=63)){
            JOptionPane.showMessageDialog(null,"Solo se admiten numeros enteros y (:)", "Error", JOptionPane.ERROR_MESSAGE);
            evt.consume();
        }
            else{
               if(txt_horaf.getText().length()==5){
                   evt.consume();
               JOptionPane.showMessageDialog(null,"Ya no puede exceder el maximo de digitos", "Error", JOptionPane.ERROR_MESSAGE);  
            }
            }
        }
    }//GEN-LAST:event_txt_horafKeyTyped

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        int errores=0;
        if(txt_nombre.getText().isEmpty()||txt_mes.getText().isEmpty()||txt_dia.getText().isEmpty()||txt_ano.getText().isEmpty()||txt_horai.getText().isEmpty()|| txt_horaf.getText().isEmpty()||
            txt_descripcion.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Por favor complete todos los campos", "Error", JOptionPane.ERROR_MESSAGE);
            
                        
       }else{
           trecreador = (String) recreadoresl.getSelectedItem();//Aqui seleccionar que recreador hara la aactividad aqui hice un casteo
            LocalDateTime ahora=LocalDateTime.now();
            //Variable para revisar los 15 dias despues
            LocalDate aux=LocalDate.now();
            Date fecha2=Date.valueOf(aux.plusDays(15));
            //fecha para guardar fecha del evento
            DateFormat formatter = new SimpleDateFormat("HH:mm");
            try{
            hora1=LocalTime.parse(txt_horai.getText());
            }catch(java.time.format.DateTimeParseException sd){
                 errores++;
                 JOptionPane.showMessageDialog(this, "Por Digitar la hora en formato militar", "Error", JOptionPane.ERROR_MESSAGE);
            }
            try{
                hora2=LocalTime.parse(txt_horaf.getText());
            }catch(java.time.format.DateTimeParseException sf){
                  JOptionPane.showMessageDialog(this, "Por Digitar la hora en formato militar", "Error", JOptionPane.ERROR_MESSAGE);
            }
           if(Integer.parseInt(txt_mes.getText())<=0 || Integer.parseInt(txt_mes.getText())>=13){
                        errores++;
                        JOptionPane.showMessageDialog(this, "Este mes es incorrecto", "Error", JOptionPane.ERROR_MESSAGE);
           }
           try{
            fechan=LocalDate.of(Integer.parseInt(txt_ano.getText()), Month.of(Integer.parseInt(txt_mes.getText())), Integer.parseInt(txt_dia.getText()));
           fecha1=Date.valueOf(fechan);//Aqui hice casteo de la fecha de la actividad
            horainicial=Time.valueOf(hora1);//Aqui la de la hora inicial
            horafinal=Time.valueOf(hora2);// aqui la de la hora final
            ahora12=Timestamp.valueOf(ahora);
            System.out.println("Hora"+horainicial+" -  "+horafinal);
           }catch(java.lang.NullPointerException sr){
                errores++;
           }catch(java.time.DateTimeException df){
              errores++;
              JOptionPane.showMessageDialog(this, "Este dia es incorrecto", "Error", JOptionPane.ERROR_MESSAGE);
                    }
           if(errores==0){         
            if(fecha2.before(fecha1)){
                System.out.println("Esta despues"+fecha1+fecha2);
            }
            else{
                 errores++;
                  JOptionPane.showMessageDialog(this, "Por favor hacer la reserva con 15 dias de anterioridad", "Error", JOptionPane.ERROR_MESSAGE);
            }
            //Aqui llamo un metodo que esta en mi repositorio de actividades envio fecha horas y recreador ese metodo retorna un entero
             if(Repositorioact.comparar(fecha1,horainicial,horafinal,trecreador)==1){
                 JOptionPane.showMessageDialog(this, "Por favor revisar el horario debido a que hay un cruce de horas", "Error", JOptionPane.ERROR_MESSAGE);
                  errores++;
              }
           }
        
        act.setNombre(txt_nombre.getText());
        act.setFechai(fecha2);
        act.setHorainicio(horainicial);
        act.setHorafin(horafinal);
        act.setDescripcion(txt_descripcion.getText());
        act.setRecreador(trecreador);
        act.setFecharegistro1(ahora12);
        
        if (errores==0) {
          
            Repositorioact.editar(act);
            JOptionPane.showMessageDialog(this, "Persona actualizada satisfactoriamente", "Bien", JOptionPane.INFORMATION_MESSAGE);

        }
          
       }
    }//GEN-LAST:event_editarActionPerformed

    private void buscareventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscareventoActionPerformed
         /*String documento = JOptionPane.showInputDialog(this, "N√∫mero de documento");
        if (!documento.isEmpty()) {
            persona = Repositorio.buscar(documento);
            if (persona != null) {
                popularPersona(persona);
            }
        }*/
    }//GEN-LAST:event_buscareventoActionPerformed

    private void txt_nombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nombreKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombreKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregar;
    private javax.swing.JButton buscarevento;
    private javax.swing.JButton editar;
    private javax.swing.JButton eliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> recreadoresl;
    private javax.swing.JTextField txt_ano;
    private javax.swing.JTextArea txt_descripcion;
    private javax.swing.JTextField txt_dia;
    private javax.swing.JTextField txt_horaf;
    private javax.swing.JTextField txt_horai;
    private javax.swing.JTextField txt_mes;
    private javax.swing.JTextField txt_nombre;
    // End of variables declaration//GEN-END:variables
}
